//usr/bin/env jshell --execution local "$0"; exit $?
// Run in sling-starter provisioning directory where the text files for the provisioning are, e.g. boot.txt, oak.txt, ...

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

    private void run() throws Exception {
        List<String> lines = new ArrayList<>();
        File[] provisioningFiles = new File(".").listFiles((f) -> f.getName().matches(".*\\.txt"));
        for (File file : provisioningFiles) {
            BufferedReader in = new BufferedReader(new FileReader(file, StandardCharsets.UTF_8));
            in.lines().forEach((l) -> lines.add(l));
        }
        Collections.sort(lines);

        // e.g. oak.version=1.8.8
        Map<String, String> vars = new HashMap<>();
        Pattern vardecl = Pattern.compile("\\s*(?<var>[a-z.]+)\\s*=\\s*(?<version>[0-9.]+)\\s*");
        for (String line : lines) {
            Matcher m = vardecl.matcher(line);
            if (m.matches()) {
                vars.put(m.group("var"), m.group("version"));
            }
        }
        // System.out.println(vars);

        // e.g. org.apache.jackrabbit.vault/org.apache.jackrabbit.vault/3.2.4
        // org.apache.jackrabbit/oak-api/${oak.version}
        List<String> deps = new ArrayList<>();
        Pattern depdecl = Pattern.compile("\\s*(?<group>[a-z.-]+)/(?<artifact>[a-z.-]+)/((?<versiondirect>[0-9.-]+)|(\\$\\{(?<versionvar>[a-z.-]+)\\}))");
        for (String line : lines) {
            Matcher m = depdecl.matcher(line);
            if (m.matches()) {
                String var = m.group("versionvar");
                String version = var != null ? vars.get(var) : m.group("versiondirect");
                String dep = "            <dependency>\n" +
                        "                <groupId>" + m.group("group") + "</groupId>\n" +
                        "                <artifactId>" + m.group("artifact") + "</artifactId>\n" +
                        "                <version>" + version + "</version>\n" +
                        "                <scope>provided</scope>\n" +
                        "            </dependency>\n";
                deps.add(dep);
            }
        }
        Collections.sort(deps);
        File pomFile = new File("sling-provisioning.xml");
        FileWriter pom = new FileWriter(pomFile);
        pom.write("            <!-- Generated by ExtractStarterProvisioning.jsh --> \n\n");
        for (String dep : deps) {
            pom.write(dep);
            pom.write("\n");
        }
        pom.close();


        System.out.println("Wrote " + pomFile.getAbsolutePath());
    }

    run();

/exit
